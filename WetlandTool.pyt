# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# draft2.py
# Created on: 2019-04-23 06:03:50.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy, sys

class Toolbox(object): #obj is an instance of the class
    def __init__(self): #self represents the instance of the class
        """Define the toolbox (the name of the toolbox is the name of the
        .pyt file)."""
        self.label = "Wetlands Toolbox" 
        self.alias = ""

        # List of tool classes associated with this toolbox
        self.tools = [WetlandAnalysis]

class WetlandAnalysis(object):
    def __init__(self): 
        """Define the tool (tool name is the name of the class)."""
        self.label = "WetlandAnalysis"
        self.description = "Calculate the area of wetlands affected by roads, railroads, and lightrail (if desired)."
        self.canRunInBackground = False

    def getParameterInfo(self): 
        """Define parameter definitions"""
        param0 = arcpy.Parameter(displayName = "Choose a workspace:",
                                 name="Workspace",
                                 datatype="DEWorkspace",
                                 parameterType="Required",
                                 direction="Input")
        param1 = arcpy.Parameter(displayName = "County file:",
                                 name="county",
                                 datatype="DeFeatureClass",
                                 parameterType="Required",
                                 direction="Input")
        param2 = arcpy.Parameter(displayName = "Input your counties of interest:",
                                 name="selCounties",
                                 datatype="GPValueTable",
                                 parameterType="Required",
                                 direction="Input",
                                 multiValue=True)
        param2.columns = [['String', 'County name']]
        param3 = arcpy.Parameter(displayName = "Choose your Road/Rail File 1:",
                                 name = "Road1",
                                 datatype = "DEFeatureClass",
                                 parameterType = "Required",
                                 direction = "Input")
        param4 = arcpy.Parameter(displayName = "Choose your Road/Rail File 2:",
                                 name = "Road2",
                                 datatype = "DEFeatureClass",
                                 parameterType = "Required",
                                 direction = "Input")
        param5 = arcpy.Parameter(displayName = "Lightrail:",
                                 name = "Lightrail",
                                 datatype = "DEFeatureClass",
                                 parameterType = "Optional",
                                 direction = "Input")
        param6 = arcpy.Parameter(displayName = "Choose your wetland file:",
                                 name = "wetland",
                                 datatype = "DEFeatureClass",
                                 parameterType = "Required",
                                 direction = "Input")
        param7 = arcpy.Parameter(displayName = "Choose your buffer distance (feet):",
                                 name = "bufdist",
                                 datatype = "GPLong",
                                 parameterType = "Required",
                                 direction = "Input")
        params = [param0,param1,param2,param3,param4,param5,param6,param7]
        return params

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return            

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        arcpy.env.overwriteOutput = True
        arcpy.env.workspace = str(parameters[0].value)

        #LocalVariables
        county_shp = str(parameters[1].value) #input county file (all NC counties)

        countyList = parameters[2].valueAsText
        countyChoice = countyList.split(";") 
        choices = ""
        n = len(countyChoice)
        while n > 1:
            choices += (str(countyChoice[n-1]) + "','")
            n -= 1
        choices += str(countyChoice[0]) 
        
        countySel = "countySel.shp" #out selected counties
        roadrails1_shp = str(parameters[3].value) #in road 1
        roadrails2_shp = str(parameters[4].value) #in road 2
        rrClip1_shp = "rrClip1.shp" #out clipped roads 1
        rrClip2_shp = "rrClip2.shp" #out clipped roads 2
        allroads_shp = "allroads.shp" #out merged roads
        lightrail_shp = str(parameters[5].value) #in lightrail
        bufDist = str(parameters[7].value) + " Feet" #in buffer dist
        roadsBuf_shp = "roadsBuf.shp" #out all roads buffer
        wetlands_shp = str(parameters[6].value) #in wetlands
        roadWetland_shp = "roadWetland.shp" #out wetlands by roads
        wetlandstats = "wetlandstats.dbf" #out stats
        
        #Select County
        arcpy.Select_analysis(county_shp, countySel, "\"CountyName\" IN ('" + choices +"')")
        arcpy.AddMessage ("County selection is completed.")

        #Clip Road/Rails File 1
        arcpy.Clip_analysis(roadrails1_shp, countySel, rrClip1_shp, "")

        #Clip Road/Rails File 2
        arcpy.Clip_analysis(roadrails2_shp, countySel, rrClip2_shp, "")
        arcpy.AddMessage ("Roads and railroads are clipped to area of interest.")

        #Merge Process 
        if parameters[5].value:
            arcpy.Merge_management([rrClip1_shp, rrClip2_shp, lightrail_shp], allroads_shp)
            
            arcpy.AddMessage ("The light rail, roads, and railroads shapefile are merged.")
        else:
            arcpy.Merge_management([rrClip1_shp, rrClip2_shp], allroads_shp)
            arcpy.AddMessage ("The roads and railroads are merged.")


        #buffer
        arcpy.Buffer_analysis(allroads_shp, roadsBuf_shp, bufDist, "FULL", "ROUND", "ALL", "", "PLANAR")
        arcpy.AddMessage("The buffer process is completed.")

        #intersect
        arcpy.Intersect_analysis([roadsBuf_shp,wetlands_shp], roadWetland_shp, "ALL", "", "INPUT")
        arcpy.AddMessage("The intersect process is completed.")

        #add area fields and calculate geometry
        arcpy.AddField_management(roadWetland_shp,'wacres','DOUBLE')
        arcpy.CalculateField_management(roadWetland_shp,'wacres','!shape.area@acres!','PYTHON_9.3')

        arcpy.AddField_management(roadWetland_shp,'wsqm','DOUBLE')
        arcpy.CalculateField_management(roadWetland_shp,'wsqm','!shape.area@squaremeters!','PYTHON_9.3')
        
        #stats
        stats_fields = [['wacres', 'SUM'], ['wsqm', 'SUM']]
        arcpy.Statistics_analysis(roadWetland_shp, wetlandstats, stats_fields)

        fields = ['SUM_wacres','SUM_wsqm']
        acre=0
        sqm=0
        with arcpy.da.SearchCursor(wetlandstats, fields) as cursor:
            for row in cursor:
                acre += row[0]
                sqm += row[0]
        arcpy.AddMessage("The total wetland area affected is {0} square meters, which is {1} in acres".format(str(sqm),str(acre)))

        del row,cursor
        return

